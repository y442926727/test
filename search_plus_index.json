{"./":{"url":"./","title":"序言","keywords":"","body":"公告信息 1、主要是个人学习记录 2、涉及知识范围Centos，Python，Java，Node.js，MySQL等 Copyright © xiaoyi all right reserved，powered by Gitbook该文件修订时间： 2020-10-25 21:51:38 "},"knowledgecompile/knowledgecompile.html":{"url":"knowledgecompile/knowledgecompile.html","title":"知识库工具","keywords":"","body":"TreeviewCopyright © aleen42 all right reserved, powered by aleen42 前言 markdown 简介 编写工具 语法 个人体会 Typora 标题自动编号 gitbook 安装 gitbook 验证安装 初使化目录 生成 本地预览 配置文件（不是必需的） gitbook插件 卸载GitBook 常用命令 关于目录插件 问题 问题（warn\"options\"） 问题（第一个h1生成不了页面目录） 问题（gitbook部署后相对路径资源文件404问题） 构建或启动时报错 前言 所有知识库内容将用markdown标记语言编写，并用gitbook生成html在线教程，上传至CentOS服务器通过nginx访问。 markdown 简介 Markdown是一种轻量级的标记语言，它允许人们使用易读易写的纯文本格式编写文档，借助可实现快速排版且转换成格式丰富的HTML页面。目前被越来越多的写作爱好者及工作者使用。其语法十分简单，常用标记符号少，学习时间少，一旦掌握这种标记语言，将极大提高效率。但是若需要复杂排版如左右对齐缩进等，还是选择word等专业软件。 Markdown用简洁的语法代替排版，而不像常用文字处理软件Word或Pages等进行排版、字体、插入等设置。标记语言可以通过键盘即实现字体大小、插入表格，图片，超链接，脚注等。 Markdown的优点 最大好处是：快速掌握。 简单，适合所有人群，方便打开，不至于出现低版本word打不开高版本word的文档。 避免软件不同，如对方是wps，看到的word文档效果和你不一样。 方便快速排版，节省时间。 轻松的导出为HTML、PDF格式。 纯文本内容，兼容所有的文本编辑器与文字处理软件。 支持Markdown语法的编辑器有很多，部分网站也支持。 编写工具 这里我推荐使用typora，因为它可以所以见即所得，不会像他编辑工具一样，左边编辑，右边预览。 语法 语法学习 《了不起的Markdown》 个人体会 markdown让我们程序员，在记录知识时省却了排版所浪费的时间，而且支持代码块，流程图等。在word上代码不支持高亮，排版格式不适宜代码显示等。而markdown会让你心情愉悦，只需在编辑内容上用心即可。 Typora 标题自动编号 在主题文件夹下开创建base.user.css文件，复制粘贴一下css样式代码： /** initialize css counter */ #write { counter-reset: h1 } h1 { counter-reset: h2 } h2 { counter-reset: h3 } h3 { counter-reset: h4 } h4 { counter-reset: h5 } h5 { counter-reset: h6 } /** put counter result into headings */ #write h1:before { counter-increment: h1; content: counter(h1) \". \" } #write h2:before { counter-increment: h2; content: counter(h1) \".\" counter(h2) \". \" } #write h3:before, h3.md-focus.md-heading:before /** override the default style for focused headings */ { counter-increment: h3; content: counter(h1) \".\" counter(h2) \".\" counter(h3) \". \" } #write h4:before, h4.md-focus.md-heading:before { counter-increment: h4; content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \". \" } #write h5:before, h5.md-focus.md-heading:before { counter-increment: h5; content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \". \" } #write h6:before, h6.md-focus.md-heading:before { counter-increment: h6; content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \".\" counter(h6) \". \" } /** override the default style for focused headings */ #write>h3.md-focus:before, #write>h4.md-focus:before, #write>h5.md-focus:before, #write>h6.md-focus:before, h3.md-focus:before, h4.md-focus:before, h5.md-focus:before, h6.md-focus:before { color: inherit; border: inherit; border-radius: inherit; position: inherit; left:initial; float: none; top:initial; font-size: inherit; padding-left: inherit; padding-right: inherit; vertical-align: inherit; font-weight: inherit; line-height: inherit; } /*左侧大纲目录序号*/ .sidebar-content { counter-reset: h1 } .outline-h1 { counter-reset: h2 } .outline-h2 { counter-reset: h3 } .outline-h3 { counter-reset: h4 } .outline-h4 { counter-reset: h5 } .outline-h5 { counter-reset: h6 } .outline-h1>.outline-item>.outline-label:before { counter-increment: h1; content: counter(h1) \". \" } .outline-h2>.outline-item>.outline-label:before { counter-increment: h2; content: counter(h1) \".\" counter(h2) \". \" } .outline-h3>.outline-item>.outline-label:before { counter-increment: h3; content: counter(h1) \".\" counter(h2) \".\" counter(h3) \". \" } .outline-h4>.outline-item>.outline-label:before { counter-increment: h4; content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \". \" } .outline-h5>.outline-item>.outline-label:before { counter-increment: h5; content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \". \" } .outline-h6>.outline-item>.outline-label:before { counter-increment: h6; content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \".\" counter(h6) \". \" } gitbook gitbook安装与使用（含常用插件和book.json配置详解） 是什么？ 在我认识 GitBook 之前，我已经在使用 Git 了，毋容置疑，Git 是目前世界上最先进的分布式版本控制系统。 我认为 Git 不仅是程序员管理代码的工具，它的分布式协作方式同样适用于很多场合，其中一个就是写作（这会是一个引起社会变革的伟大的工具！）。所以在我发现 GitBook 之前，实际上我已经无数次想象过它的使用场景了。 咋一看 GitBook 的名字，你可能会认为它是关于 Git 的一本书。而当你有所了解之后，你也许会认为它是一个使用 Git 构建电子书的工具。其实不然，GitBook 与 Git 的关系，就像雷锋塔和雷锋那样，没有一点关系！ 实际上，GitBook 是一个基于 Node.js 的命令行工具，支持 Markdown 和 AsciiDoc 两种语法格式，可以输出 HTML、PDF、eBook 等格式的电子书。所以我更喜欢把 GitBook 定义为文档格式转换工具。 所以，GitBook 不是 Markdown 编辑工具，也不是 Git 版本管理工具。市面上我们可以找到很多 Markdown 编辑器，比如 Typora、MacDown、Bear、MarkdownPad、MarkdownX、JetBrains’s IDE（需要安装插件）、Atom、简书、CSDN 以及 GitBook 自家的 GitBook Editor 等等。 安装 gitbook GitBook 是一个基于 Node.js 的命令行工具，下载安装 Node.js，安装完成之后，你可以使用下面的命令来检验是否安装成功。 $ node -v v7.7.1 确认安装完node.js后再执行一下命令 npm install gitbook-cli -g #或者（yarn类似于npm安装方式，具体参考node.js章节） yarn global add gitbook-cli 验证安装 gitbook -V 注意：若输入上面命令后，提示Installing GitBook，时间较长，请耐心等待。 初使化目录 gitbook init 会发现目录下面多了2个文件，README.md和SUMMARY.md README.md 和 SUMMARY.md 是两个必须文件 README.md 是对书籍的简单介绍 SUMMARY.md 是书籍的目录结构 生成 #生成在当前目录的默认文件夹 _book里面 gitbook build #生成在当前目录的默认文件夹 指定的out 里面 gitbook build ./out #当前md外 生成out gitbook build ./md ./out 本地预览 #注意server没有r。默认端口4000 gitbook serve --port 8088 http://localhost:4000 配置文件（不是必需的） 在目录下创建book.json文件，json对象在使用过成中，不允许注释，请复制粘贴后删除注释部分。 { \"title\": \"前端规范\", \"description\": \"前端规范 简介\", \"language\": \"zh-hans\", \"plugins\": [ \"-lunr\", \"-search\", \"code\", //代码行号插件和复制 \"search-plus\", //支持中文搜索 上面 search 是默认的 “-” 是去掉的意思 \"splitter\", // 这个侧边可以拉伸 \"tbfed-pagefooter\", //这个是底部加 信息 下面可以看到具体的配置 \"expandable-chapters-small\"//使左侧的章节目录可以折叠 \"page-treeview\", //页面头部目录 \"page-toc-button\", //右侧悬浮目录导航 \"icp\" //备案信息 ], \"pluginsConfig\": { \"theme-default\": { \"showLevel\": true }, \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy xxxxx\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"page-treeview\": { \"copyright\": \"Copyright &#169; aleen42\", \"minHeaderCount\": \"2\", \"minHeaderDeep\": \"2\" }, \"page-toc-button\": { \"maxTocDepth\": 2, \"minTocSize\": 2 }, \"icp\": { \"label\": \"\", \"number\": \"浙ICP备18042346号\", \"link\": \"http://beian.miit.gov.cn/\", \"style\": { \"color\": \"#f72b07\" } }, \"links\": { \"gitbook\": false, \"sharing\": { \"google\": false, \"facebook\": false, \"twitter\": false, \"all\": false } } } 上面配置好后，启动服务会报错，这样需要我们安装gitbook插件 gitbook插件 gitbook仓库（使用gitbook-plugin-{插件名称}关键字搜索） 常用插件 #插件只要在第6节描述的json中配置好后，再执行该命令，就会自动安装（太慢） gitbook install #推荐使用（会使用nodejs镜像安装） npm install gitbook-plugin-{插件名称} 【提醒】因为gitbook项目不是标准的nodejs项目，所以安装会出现如下图警告，请不要理会。 安装的插件都在当前目录下的node_modules文件夹下 #所以可以插件目录下按需删除，对插件卸载。也可将整个文件夹删除卸载。 rmdir /s/q node_modules\\ 卸载GitBook rmdir /s/q C:\\Users\\{User}\\.gitbook #找到并删除此文件夹 删除后执行命令 npm uninstall -g gitbook npm uninstall -g gitbook-cli # 清除npm缓存 npm cache clean --force 常用命令 gitbook init //初始化目录文件 gitbook help //列出gitbook所有的命令 gitbook --help //输出gitbook-cli的帮助信息 gitbook build //生成静态网页 gitbook serve //生成静态网页并运行服务器 gitbook build --gitbook=2.0.1 //生成时指定gitbook的版本, 本地没有会先下载 gitbook ls //列出本地所有的gitbook版本 gitbook ls-remote //列出远程可用的gitbook版本 gitbook fetch 标签/版本号 //安装对应的gitbook版本 gitbook update //更新到gitbook的最新版本 gitbook uninstall 2.0.1 //卸载对应的gitbook版本 gitbook build --log=debug //指定log的级别 gitbook builid --debug //输出错误信息 关于目录插件 因为我们标题序号都是通过css自动生成，所以我们gitbook构建出的html，标题及目录也要用css生成编号。故我们要在项目目录下创建styles/website.css文件夹及文件，这样构建后，html会自动引用该样式。 /*隐藏page-treeview目录的版权信息*/ .treeview__container-title{ display: none; } /*给头部目录增加编号*/ .markdown-section li {counter-increment:a 1;} .markdown-section li a:before{content:counter(a)\". \";} .markdown-section li li {counter-increment:b 1;} .markdown-section li li a:before{content:counter(a)\".\"counter(b)\". \";} .markdown-section li li li {counter-increment:c 1;} .markdown-section li li li a:before{content:counter(a)\".\"counter(b)\".\"counter(c)\". \";} .markdown-section li li li li {counter-increment:d 1;} .markdown-section li li li li a:before{content:counter(a)\".\"counter(b)\".\"counter(c)\".\"counter(d)\". \";} /*给悬浮目录增加编号*/ .page-toc-menu li {counter-increment:toca 1;} .page-toc-menu li a:before{content:counter(toca)\". \";} .page-toc-menu ul ul li {counter-increment:tocb 1;} .page-toc-menu ul ul li a:before{content:counter(toca)\".\"counter(tocb)\". \";} /*给标题增加编号*/ .markdown-section { counter-reset: h1} h1 {counter-reset: h2} h2 {counter-reset: h3} h3 {counter-reset: h4} h4 {counter-reset: h5} h5 {counter-reset: h6} .markdown-section h1:before {counter-increment: h1; content: counter(h1) \". \";} .markdown-section h2:before {counter-increment: h2; content: counter(h1) \".\" counter(h2) \". \"} .markdown-section h3:before {counter-increment: h3;content: counter(h1) \".\" counter(h2) \".\" counter(h3) \". \"} .markdown-section h4:before {counter-increment: h4; content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \". \"} .markdown-section h5:before {counter-increment: h5; content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \". \"} .markdown-section h6:before {counter-increment: h6; content: counter(h1) \".\" counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \".\" counter(h6) \". \"} 问题 问题（warn\"options\"） 该问题经过排除法和网络上类似问题描述，应该是所使用的插件版本自身某些语法规则不是最新的导致。 问题（第一个h1生成不了页面目录） 需要首行空一行 问题（gitbook部署后相对路径资源文件404问题） 这种资源文件提示404错误请忽略，这是因为gitbook布局不是用iframe，所以资源文件会在页面加载完后，js会再处理相对路径的资源文件。 构建或启动时报错 如果出现类似这样的错误，就删除_book文件夹，重新执行命令即可。 Copyright © xiaoyi all right reserved，powered by Gitbook该文件修订时间： 2020-10-17 21:42:44 "},"os/centosdev/centosdev.html":{"url":"os/centosdev/centosdev.html","title":"操作系统","keywords":"","body":"TreeviewCopyright © aleen42 all right reserved, powered by aleen42 CentOS8 简介 安装 系统目录结构说明 安装基础软件 安装epel 配置系统镜像源 升级内核 查看版本 启用 ELRepo 仓库 查看可用的系统内核包 安装最新版本内核 验证 删除旧内核 安装新版本工具包 常用命令 网络配置 关闭SELinux 防火墙 疑问 su命令与su - 命令的区别 切换root身份不同 采用su deploy命令后，取目标用户不同 service命令 用echo $PATH命令后，环境量不同 待整理或学习 Docker&Docker-compose的安装 docker 简介 安装准备 添加docker的yum源管理配置 查看docker-ce各个版本 安装docker-ce Centos8提示错误信息 常用命令 Docker-Compose安装 简介 安装（两种安装） 下载安装方式 pip安装方式 验证安装 详解Docker-Compose.yml文件 安装gitlab Docker安装gitlab 在DockerHub上搜索中文版本GitLab镜像 Pull GitLab镜像到本地 使用docker-compose启动gitlab容器 测试邮件 附加 免密登录 关于迁移或升级 迁移 升级 附加 Nexus Docker安装Nexus ※：所有命令通常是基于cd ~ 目录进行（即 当前用户目录 ），除非有特殊说明，如前后通过cd切换了目录或图片说明明示了路径，切记CentOS 区分大小写，而Windows不区分 CentOS8 简介 CentOS，是基于 Red Hat Linux 提供的可自由使用源代码的企业级 Linux 发行版本；是一个稳定，可预测，可管理和可复制的免费企业级计算平台。 功能 CentOS 8 CentOS 7 内核版本 4.18.0-x 3.10.0-x 文件系统 XFS XFS 时间同步 只支持Chronyd 支持NTP和Chronyd 文件大小 8EB 500TB 文件系统大小 1PB 500TB 包管理工具 DNF（YUM v4） YUM（YUM v3） 最大内存 24TB 12TB 防火墙 nftables取代iptables firewalld底层使用iptables 支持架构 支持64-bit ARM 不支持64-bit ARM 网络管理 默认安装Cockpit 无默认安装 CPU日志 CPU日志记录在journald进程中 CPU相关日志位于/var/log/cups目录 发布时间 2019-09-24 2014-07-07 完整更新 2024-05-01 2020-08-06 支持IPv6 支持 Ready Logo Phase 2 Git 2.18 1.7 GCC 8.2.1 4.8.5 Python 3.6.6 2.7.5 Glibc 2.28 2.17 Boost 1.66 1.53 LLVM/Clang 6.0 5.0 安装 因为我们是搭建服务器环境我们再安装过程中选择最小安装，后续需要应用到的软件，我们按需安装。使我们的服务器占用硬件资源最少。 我们输入Chinese关键字，选择到中文语言 务必先将网络打开，因为后续进入系统时，安装软件都需要网络。避免因网络未打开，安装完系统进入后，还手动配置网络。 安装过程中我们可以设置root密码和创建用户。 查看CentOS的IP，方便XShell登录使用 系统目录结构说明 安装基础软件 因为我们选择的是最小安装，很多系统工具没有安装，导致很多命令没法使用，如ifconfig，vim，wget等 #解决ifconfig yum -y install net-tools #解决vim(vi是所有UNIX系统都会提供的屏幕编辑器，也有的称为多模式编辑器，它提供了一个视窗设备，通过它可以编辑文件，而vim则是vi的升级版本，它不仅兼容vi的所有指令，而且还有一些新的特性在里面。如vim可以用不同的颜色来加亮你的代码、在vi里，按 u只能撤消上次命令，而在vim里可以无限制的撤消。) yum -y install vim #解决wget(非要说区别的话，curl由于可自定义各种请求参数所以在模拟web请求方面更擅长；wget由于支持ftp和Recursive所以在下载文件方面更擅长。类比的话curl是浏览器，而wget是迅雷9。) yum -y install wget #解决yum-config-manager命令找不到（使用yum-config-manager命令可以进行YUM配置管理） yum -y install yum-utils #常用软件 yum install wget vim yum-utils net-tools telnet nmap sysstat lrzsz dos2unix bind-utils -y 安装epel EPEL (Extra Packages for Enterprise Linux)是基于Fedora的一个项目，为“红帽系”的操作系统提供额外的软件包，适用于RHEL、CentOS和Scientific Linux. yum install epel-release 配置系统镜像源 镜像配置参考 考虑到镜像源可以多次配置，建议备份文件后加上年月日。 #0. 查看本地镜像源信息 cat /etc/yum.repos.d/CentOS-Base.repo #1. 备份 mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup #2. 下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/ # CentOS 6 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo # 或者 curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo # CentOS 7 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo # 或者 curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo # CentOS 8 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo # 或者 curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo #运行 yum makecache 生成缓存 yum makecache 升级内核 查看版本 #查看当前内核版本 uname -r #查看系统版本 cat /etc/redhat-release 启用 ELRepo 仓库 ELRepo 仓库是基于社区的用于企业级 Linux 仓库，提供对 RedHat Enterprise (RHEL) 和 其他基于 RHEL的 Linux 发行版（CentOS、Scientific、Fedora 等）的支持。 ELRepo 聚焦于和硬件相关的软件包，包括文件系统驱动、显卡驱动、网络驱动、声卡驱动和摄像头驱动等。 #导入ELRepo仓库的公共密钥 rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org #安装ELRepo仓库的yum源 #centos8 yum install https://www.elrepo.org/elrepo-release-8.el8.elrepo.noarch.rpm #centos7 yum install https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm 查看可用的系统内核包 在https://www.kernel.org/上可以查看最新核心 yum --disablerepo=\"*\" --enablerepo=\"elrepo-kernel\" list available 安装最新版本内核 yum --enablerepo=elrepo-kernel install kernel-ml --enablerepo 选项开启 CentOS 系统上的指定仓库。默认开启的是 elrepo，这里用 elrepo-kernel 替换。 启动后选择最新的内核版本 验证 uname -r 删除旧内核 #查看系统中全部的内核： rpm -qa | grep kernel #删除老内核以及内核工具 rpm -qa|grep kernel|grep 3.10 rpm -qa|grep kernel|grep 3.10|xargs yum remove -y 安装新版本工具包 yum --disablerepo=\\* --enablerepo=elrepo-kernel install -y kernel-ml-tools.x86_64 http://elrepo.org/tiki/tiki-index.php https://www.cnblogs.com/xzkzzz/p/9627658.html 常用命令 网络配置 #配置网卡信息 vim /etc/sysconfig/network-scripts/ifcfg-ens33 #重启网络服务 systemctl restart network #修改主机名 hostnamectl set-hostname #查看主机名 hostname 关闭SELinux 安全增强型 Linux（Security-Enhanced Linux）简称 SELinux，它是一个 Linux 内核模块，也是 Linux 的一个安全子系统。 SELinux 主要由美国国家安全局开发。2.6 及以上版本的 Linux 内核都已经集成了 SELinux 模块。 SELinux 的结构及配置非常复杂，而且有大量概念性的东西，要学精难度较大。很多 Linux 系统管理员嫌麻烦都把 SELinux 关闭了。 如果可以熟练掌握 SELinux 并正确运用，我觉得整个系统基本上可以到达\"坚不可摧\"的地步了（请永远记住没有绝对的安全）。 掌握 SELinux 的基本概念以及简单的配置方法是每个 Linux 系统管理员的必修课。 #将SELINUX=enforcing改为SELINUX=disabled vim etc/selinux/config #查看状态 getenforce 防火墙 #查看防火墙状态 systemctl status firewalld #停止防火墙 systemctl stop firewalld CentOS7 常用命令集合 启动一个服务：systemctl start nginx.service 关闭一个服务：systemctl stop postfix.service 重启一个服务：systemctl restart nginx.service 显示一个服务的状态：systemctl status postfix.service 在开机时启用一个服务：systemctl enable nginx.service 在开机时禁用一个服务：systemctl disable nginx.service 查看服务是否开机启动：systemctl is-enabled nginx.service 查看已启动的服务列表：systemctl list-unit-files|grep enabled 查看启动失败的服务列表：systemctl --failed free -h 查看内存使用情况 df -hl 查看磁盘剩余空间 df -h 查看每个根路径的分区大小 du -sh [目录名] 返回该目录的大小 du -sm [文件夹] 返回该文件夹总M数 du -h [目录名] 查看指定文件夹下的所有文件大小（包含子文件夹） 查看硬盘的分区 #sudo fdisk -l 查看IDE硬盘信息 #sudo hdparm -i /dev/hda 查看STAT硬盘信息 #sudo hdparm -I /dev/sda 或 #sudo apt-get install blktool #sudo blktool /dev/sda id 查看硬盘剩余空间 #df -h #df -H 查看目录占用空间 #du -hs 目录名 优盘没法卸载 #sync fuser -km /media/usbdisk 疑问 su命令与su - 命令的区别 切换root身份不同 su命令：su只是切换了root身份，但Shell环境仍然是普通用户的Shell；而su -连用户和Shell环境一起切换成root身份了。只有切换了Shell环境才不会出现PATH环境变量错误，报command not found的错误。 su - 命令：su切换成root用户以后，pwd一下，发现工作目录仍然是普通用户的工作目录；而用su -命令切换以后，工作目录变成root的工作目录了。 采用su deploy命令后，取目标用户不同 su命令：su不会读取目标用户的环境配置文件，如图。 su - 命令：su - 读取目标用户的环境配置文件，如图。 综上总结：有“-”和无“-”各自的环境变量不同。 service命令 su命令：使用 su root 切换到root用户后，不可以使用service命令； su - 命令：使用 su - 后，就可以使用service命令了。 用echo $PATH命令后，环境量不同 su命令：环境量变为usr。 2、su - 命令：环境量变为oracle。 待整理或学习 Linux软件安装管理之——RPM与YUM详解 Docker&Docker-compose的安装 docker 简介 Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。 安装准备 切换至root用户&确认CentOS的内核&更新CentOS #切换至root su root #确认内核 uname -r #系统更新 yum update 添加docker的yum源管理配置 国内建议是阿里源，官方源为https://download.docker.com/linux/centos/docker-ce.repo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 查看docker-ce各个版本 yum list docker-ce --showduplicates|sort -r 安装docker-ce yum install docker-ce 命令不标注版本号，则按照last版本。（若安装不成功，请参考下一小节解决） Centos8提示错误信息 这个是要求提前安装必要的containerd.io yum list containerd.io --showduplicates|sort -r yum install https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm 我们看到直接这样的查询containerd.io版本都低于必要版本（如果有当然更好，直接使用 yum install -y containerd.io 安装即可），所以我们要去看阿里镜像里最新的版本 https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/ 常用命令 查看版本：docker -v 查看镜像：docker images 查看容器：docker ps 启动 docker 服务：systemctl start docker 停止 docker 服务：systemctl stop docker 重启 docker 服务：systemctl restart docker 进入一个运行中的容器：docker exec -it xx /bin/bash (xx可以是Id也可以是Name) ※注：使用非root用户启用或链接docker会提示权限被拒绝，所以需要切换至root用户或者sudo或者按下面说明加入docker组 默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。 建立docker组： sudo groupadd docker 将当前用户添加到docker组中：sudo usermod -aG docker $USER Docker-Compose安装 简介 Docker Compose是 docker 提供的一个命令行工具，用来定义和运行由多个容器组成的应用。使用 compose，我们可以通过 YAML 文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动。 安装（两种安装） 下载安装方式 通过 curl命令https://github.com/docker/compose/releases获取最新安装包。并将下载的文件通过chmod +x赋予可执行权限 #下载并解压，可以将下面命令的版本号替换成最新的即可直接使用 curl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose #赋予可执行权限 chmod +x /usr/local/bin/docker-compose pip安装方式 https://www.cnblogs.com/felixqiang/p/11946644.html 验证安装 #测试安装 sudo docker-compose --version 详解Docker-Compose.yml文件 https://www.jianshu.com/p/ba77c7bdf03e 安装gitlab Docker安装gitlab 在DockerHub上搜索中文版本GitLab镜像 现在新版本gitlab新版官方已支持本地化（中文），所以不需要在pull非官方中文版本 https://hub.docker.com/ search gitlab/gitlab-ce Pull GitLab镜像到本地 使用docker-compose启动gitlab容器 在/usr/local/docker/gitlab/目录下创建 docker-compose.yml docker-compose.yml version: '3' services: gitlab: image: 'gitlab/gitlab-ce' #镜像名称 container_name: 'gitlab' #自定义容器名称 restart: unless-stopped hostname: '172.16.16.4' #内网地址 environment: TZ: 'Asia/Shanghai' GITLAB_OMNIBUS_CONFIG: | external_url 'http://182.61.150.130' gitlab_rails['gitlab_shell_shh_port'] = 2222 unicorn['port']=8888 nginx['listen_port']=80 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] ='smtp.wo.cn' gitlab_rails['smtp_port'] = 465 gitlab_rails['smtp_user_name'] = '13048818693@wo.cn' gitlab_rails['smtp_password'] = '邮箱密码' gitlab_rails['smtp_domain'] = 'wo.cn' gitlab_rails['smtp_authentication'] = 'login' gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = true gitlab_rails['gitlab_email_from'] = '13048818693@wo.cn' gitlab_rails['gitlab_email_reply_to'] = '13048818693@wo.cn' ports: - '80:80' - '8443:443' - '2222:22' volumes: - /usr/local/docker/gitlab/config:/etc/gitlab - /usr/local/docker/gitlab/data:/var/opt/gitlab - /usr/local/docker/gitlab/logs:/var/log/gitlab deploy: resources: limits: memory: 1.5G reservations: memory: 0.5G 使用docker-compose up -d命令启动容器（建议修改配置后第一次启动使用docker-compose up启动 这样可以看到会不会报错） 测试邮件 附加 https://docs.gitlab.com/omnibus/settings/smtp.html https://docs.docker.com/compose/compose-file/ 免密登录 将tortoise git客户端的默认ssh客户修改成git目录下的ssh客户端 在git的bin目录下执行ssh-keygen -t rsa -C \"your_email@youremail.com\" 命令，一路回车，生成公钥C:\\Users\\Administrator.ssh\\id_rsa.pub文件 关于迁移或升级 Docker Gitlab数据迁移之备份恢复https://www.jianshu.com/p/e7c056d273b6 迁移 #进入docker容器，-it 参数后为容器Id(也可以是容器名称),可通过docker ps 获得 docker exec -it 69d13187445e /bin/bash #执行备份，备份文件会产生到/var/opt/gitlab/backups/ gitlab-rake gitlab:backup:create #查看gitlab版本（新的目标服务器gitlab版本必须与源服务的gitlab版本一直，不然会出现失败情况） cat /opt/gitlab/embedded/service/gitlab-rails/VERSION #将备份文件从容器中（也可以是容器名称）复制到宿主机的root目录下（也可以是任意目录） docker cp 69d13187445e:/var/opt/gitlab/backups/1590636450_2020_05_28_13.0.0_gitlab_backup.tar /root #在新服务器上将文件copy到目标的容器中(这里gitlab是容器名称) docker cp 1590636450_2020_05_28_13.0.0_gitlab_backup.tar gitlab:/var/opt/gitlab/backups/ #进入docker容器(这里gitlab是容器名称) docker exec -it gitlab /bin/bash #在容器中停止相关数据连接服务 gitlab-ctl stop unicorn gitlab-ctl stop sidekiq #备份文件搜权，必须是git用户所有者（用root下导入才需要） chown -R git:git /var/opt/gitlab/backups/1590636450_2020_05_28_13.0.0_gitlab_backup.tar #从1590636450_2020_05_28_13.0.0编号备份中恢复(这里gitlab是命令格式) gitlab-rake gitlab:backup:restore BACKUP=1590636450_2020_05_28_13.0.0 #启动Gitlab sudo gitlab-ctl start 暂未发现不覆盖会导致问题，gitlab.rb的配置部分已在docker-compose.yml内已配置。 升级 因为gitlab新旧版本之间数据库可能有变更，所以存在原版本升级到跨度比较大的版本，存在数据库升级失败的情况。为此建议升级前按迁移方式备份好数据。 https://docs.gitlab.com/ee/policy/maintenance.html#upgrade-recommendations 我是从11.1.4升级的，升级路径为11.1.4→11.3.4→11.11.8→12.0.12→12.10.6→latest(13.0.0) 个人认为的基本原则是，当前版本，应对升级到当前大版本的最后一个版本，然后下一个大版本的起始小版本，同时参考官方给的指引。避免同一个大版本之间的小版本数据库也有较大的变化而不能兼容升级。 附加 Nexus Docker安装Nexus 用户的admin默认密码在docker-composer.yml映射路径的admin.password文件中,登录后就要求修改密码，文件就会被系统删除。 Copyright © xiaoyi all right reserved，powered by Gitbook该文件修订时间： 2020-09-27 10:18:50 "},"database/soar/soar.html":{"url":"database/soar/soar.html","title":"数据库","keywords":"","body":"TreeviewCopyright © aleen42 all right reserved, powered by aleen42 SOAR 功能特点 快速入门 安装使用 下载二进制安装包 源码安装 依赖软件 生成二进制文件 开发调试 安装验证 体系架构 语法解析和语法检查 集成环境 优化建议 启发式规则建议 索引优化 EXPLAIN解读 重写逻辑 工具集 配置文件 配置文件说明 命令行参数 命令行参数配置DSN 以下DSN格式不再推荐使用 DSN格式支持 SQL评分 常用命令 基本用法 指定输入源 指定配置文件 打印所有的启发式规则 忽略某些规则 打印支持的报告格式 以指定格式输出报告 语法检查工具 慢日志进行分析示例 SQL指纹 将 UPDATE/DELETE/INSERT 语法转为 SELECT 合并多条ALTER语句 SQL美化 EXPLAIN信息分析报告 markdown 转 HTML 清理测试环境残余的临时库表 产品对比 路线图 SOAR-WEB 下载地址 安装 手册 [toc] SOAR SOAR(SQL Optimizer And Rewriter) 是一个对 SQL 进行优化和改写的自动化工具。 由小米人工智能与云平台的数据库团队开发与维护。 功能特点 跨平台支持（支持 Linux, Mac 环境，Windows 环境理论上也支持，不过未全面测试） 目前只支持 MySQL 语法族协议的 SQL 优化 支持基于启发式算法的语句优化 支持复杂查询的多列索引优化（UPDATE, INSERT, DELETE, SELECT） 支持 EXPLAIN 信息丰富解读 支持 SQL 指纹、压缩和美化 支持同一张表多条 ALTER 请求合并 支持自定义规则的 SQL 改写 快速入门 安装使用 下载二进制安装包 wget https://github.com/XiaoMi/soar/releases/download/${tag}/soar.${OS}-amd64 -O soar chmod a+x soar 如： wget https://github.com/XiaoMi/soar/releases/download/0.11.0/soar.linux-amd64 -O soar chmod a+x soar 源码安装 依赖软件 一般依赖 Go 1.10+ git 高级依赖（仅面向开发人员） mysql 客户端版本需要与容器中MySQL版本相同，避免出现由于认证原因导致无法连接问题 docker MySQL Server测试容器管理 govendor Go包管理 retool 依赖外部代码质量静态检查工具二进制文件管理 生成二进制文件 go get -d github.com/XiaoMi/soar cd ${GOPATH}/src/github.com/XiaoMi/soar && make 开发调试 如下指令如果您没有精力参与SOAR的开发可以跳过。 make deps 依赖检查 make vitess 升级Vitess Parser依赖 make tidb 升级TiDB Parser依赖 make fmt 代码格式化，统一风格 make lint 代码质量检查 make docker 启动一个MySQL测试容器，可用于测试依赖元数据检查的功能或不同版本MySQL差异 make test 运行所有的测试用例 make cover 代码测试覆盖度检查 make doc 自动生成命令行参数中-list-XX相关文档 make daily 每日构建，时刻跟进Vitess, TiDB依赖变化 make release 生成Linux, Windows, Mac发布版本 安装验证 echo 'select * from film' | ./soar 体系架构 SOAR主要由语法解析器，集成环境，优化建议，重写逻辑，工具集五大模块组成。下面将对每个模块的作用及设计实现进行简述，更详细的算法及逻辑会在各个独立章节中详细讲解。 语法解析和语法检查 一条SQL从文件，标准输入或命令行参数等形式传递给SOAR后首先进入语法解析器，这里一开始我们选用了vitess的语法解析库作为SOAR的语法解析库，但随时需求的不断增加我们发现有些复杂需求使用vitess的语法解析实现起来比较逻辑比较复杂。于是参考业务其他数据库产品，我们引入了TiDB的语法解析器做为补充。我们发现这两个解析库还存在一定的盲区，于是又引入了MySQL执行返回结果作为多版本SQL方言的补充。大家也可以看到在语法解析器这里，SOAR的实现方案是松散的、可插拔的。SOAR并不直接维护庞大的语法解析库，它把各种优秀的语法解析库集成在一起，各取所长。 集成环境 集成环境区分线上环境和测试环境两种，分别用于解决不同场景下用户的SQL优化需求。一种常见的情况是已有表结构需要优化查询SQL的场景，可以从线上环境导出表结构和足够的采样数据到测试环境，在测试环境上就可以放心的执行各种高危操作而不用担心数据被损坏。另一种常见的情况是建一套全新的数据库，需要验证提供的数据字典中是否存在优化的可能。对于这种情况，很有可能你不需要知道线上环境在哪儿，完全只是想先试试看，如果报错了马上改对就是了。当然还有更多种组合的场景需求，将在集成环境中介绍。 优化建议 目前SOAR可以提供的优化建议有基于启发式规则(通常也称之为经验)的优化建议，基于索引优化算法给出的索引优化建议，以及基于EXPLAIN信息给出的解读。 启发式规则建议 下面这段代码是启发式规则的的元数据结构，它由规则代号，危险等级，规则摘要，规则解释，SQL示例，建议位置，规则函数等7部分组成。每一条SQL经过语法解析后会经过数百个启发式规则的逐一检查，命中了的规则将会保存在一个叫heuristicSuggest的变量中传递下去，与其他优化建议合并输出。这里最核心的部分，也是代码最多的部分在heuristic.go，里面包含了所有的启发式规则实现的函数。所有的启发式规则列表保存在rules.go文件中。 // Rule 评审规则元数据结构 type Rule struct { Item string `json:\"Item\"` // 规则代号 Severity string `json:\"Severity\"` // 危险等级：L[0-8], 数字越大表示级别越高 Summary string `json:\"Summary\"` // 规则摘要 Content string `json:\"Content\"` // 规则解释 Case string `json:\"Case\"` // SQL示例 Position int `json:\"Position\"` // 建议所处SQL字符位置，默认0表示全局建议 Func func(*Query4Audit) Rule `json:\"-\"` // 函数名 } 索引优化 关于索引优化，数据库经过几十年的发展，DBA沉淀了很多宝贵的经验，怎样把这些感性的经验转化为覆盖全面、逻辑可推导的算法是这种模块最大的挑战。很幸运的是SOAR并不是第一个尝试做这类算法整理的产品，有很多前人的著作、论文、博客等的知识储备。毫不夸张的说，为了写成这个模块我们读了不下5百万字的著作和论文，还不包括网络上各种大神的博客，这些老师们的知识结晶收集整理在鸣谢章节。使用到的算法在索引优化章节有详细的描述，虽然在某些算法理解上可能还存在一定争议，很希望与同行们共同讨论，共同进步，不断完善SOAR的算法。 EXPLAIN解读 做过SQL优化的人对EXPLAIN应该都不陌生，但对于新手来说要记住每一个列代表什么含义，每个关键字背后的奥秘是什么需要足够的脑容量来记忆才行。统计了一下SOAR只在EXPLAIN信息的注解一项差不多写了200行代码，按平均行长度120计算，算下来一个DBA要精通EXPLAIN优化就要记住不下2万字的文档。SOAR能帮每为DBA节约了这部分脑容量。不过关于EXPLAIN解读还远不止这些，想了解更多可以参考EXPLAIN信息解读章节。 重写逻辑 上面提到的优化建议是我们早期实现的主要功能，早期的功能还只是停留在建议上，对于一些初级用户看到建议也不一定会改写。为了进一步简化SQL优化的成本，SOAR又进一步挖掘了自动SQL重写的功能。现在提供几十种常见场景下的SQL等价转写，不过相比SQL优化建议还有很大的改进空间。这部分的功能和逻辑将在重写逻辑一章中详细说明。 工具集 除了SQL优化和改写以外，为了方便用户使用以及美化输出展现形式，SOAR还提供了一些辅助的小工具，比如markdown转HTML工具，SQL格式化输出工具等等。你可以在常用命令中找到这些小工具的使用方法。 配置文件 配置文件说明 配置文件为yaml格式。一般情况下只需要配置online-dsn, test-dsn, log-output等少数几个参数。即使不创建配置文件SOAR仍然会给出基本的启发式建议。 默认文件会按照/etc/soar.yaml, ./etc/soar.yaml, ./soar.yaml顺序加载，找到第一个后不再继续加载后面的配置文件。如需指定其他配置文件可以通过-config参数指定。 关于数据库权限online-dsn需要相应库表的SELECT权限，test-dsn需要root最高权限。 # 线上环境配置 online-dsn: addr: 127.0.0.1:3306 schema: sakila user: root password: 1t'sB1g3rt disable: false # 测试环境配置 test-dsn: addr: 127.0.0.1:3307 schema: test user: root password: 1t'sB1g3rt disable: false # 是否允许测试环境与线上环境配置相同 allow-online-as-test: true # 是否清理测试时产生的临时文件 drop-test-temporary: true # 语法检查小工具 only-syntax-check: false sampling-statistic-target: 100 sampling: false # 日志级别，[0:Emergency, 1:Alert, 2:Critical, 3:Error, 4:Warning, 5:Notice, 6:Informational, 7:Debug] log-level: 7 log-output: ${your_log_dir}/soar.log # 优化建议输出格式 report-type: markdown ignore-rules: - \"\" # 黑名单中的 SQL 将不会给评审意见。一行一条 SQL，可以是正则也可以是指纹，填写指纹时注意问号需要加反斜线转义。 blacklist: ${your_config_dir}/soar.blacklist # 启发式算法相关配置 max-join-table-count: 5 max-group-by-cols-count: 5 max-distinct-count: 5 max-index-cols-count: 5 max-total-rows: 9999999 spaghetti-query-length: 2048 allow-drop-index: false # EXPLAIN相关配置 explain-sql-report-type: pretty explain-type: extended explain-format: traditional explain-warn-select-type: - \"\" explain-warn-access-type: - ALL explain-max-keys: 3 explain-min-keys: 0 explain-max-rows: 10000 explain-warn-extra: - \"\" explain-max-filtered: 100 explain-warn-scalability: - O(n) query: \"\" list-heuristic-rules: false list-test-sqls: false verbose: true 命令行参数 几乎所有配置文件中指定的参数都通通过命令行参数进行修改，且命令行参数优先级较配置文件优先级高。 soar -h 命令行参数配置DSN SOAR 最新版本已经使用go-sql-driver替代了mymysql，DSN将使用go-sql-driver格式并且保持向前兼容，请参考go-sql-driver文档。 以下DSN格式不再推荐使用 账号密码中如包含特殊符号(如：'@',':','/'等)可在配置文件中设置，存在特殊字符的情况不适合在命令行中使用。目前soar只支持 tcp 协议的 MySQL 数据库连接方式，如需要配置本机MySQL环境建议将localhost修改为'127.0.0.1'，并检查对应的 'user'@'127.0.0.1' 账号是否存在。 soar -online-dsn \"user:password@ip:port/database\" soar -test-dsn \"user:password@ip:port/database\" DSN格式支持 \"user:password@127.0.0.1:3307/database\" \"user:password@127.0.0.1:3307\" \"user:password@127.0.0.1:/database\" \"user:password@:3307/database\" \"user:password@\" \"127.0.0.1:3307/database\" \"@127.0.0.1:3307/database\" \"@127.0.0.1\" \"127.0.0.1\" \"@/database\" \"@127.0.0.1:3307\" \"@:3307/database\" \":3307/database\" \"/database\" SQL评分 不同类型的建议指定的Severity不同，严重程度数字由低到高依次排序。满分100分，扣到0分为止。L0不扣分只给出建议，L1扣5分，L2扣10分，每级多扣5分以此类推。当由时给出L1, L2两要建议时扣分叠加，即扣15分。 如果您想给出不同的扣分建议或者对指引中的文字内容不满意可以为在 git 中提 ISSUE，也可直接修改 rules.go 的相应配置然后重新编译自己的版本。 注意：目前只有markdown和html两种-report-type支持评分输出显示，其他输出格式如有评分需求可以按上述规则自行计算。 常用命令 基本用法 echo \"select title from sakila.film\" | ./soar -log-output=soar.log 指定输入源 # 从文件读取SQL ./soar -query file.sql # 从管道读取SQL cat file.sql | ./soar 指定配置文件 vi soar.yaml # yaml format config file online-dsn: addr: 127.0.0.1:3306 schema: sakila user: root password: \"1t'sB1g3rt\" disable: false test-dsn: addr: 127.0.0.1:3306 schema: sakila user: root password: \"1t'sB1g3rt\" disable: false echo \"select title from sakila.film\" | ./soar -test-dsn=\"root:1t'sB1g3rt@127.0.0.1:3306/sakila\" -allow-online-as-test -log-output=soar.log 打印所有的启发式规则 soar -list-heuristic-rules 忽略某些规则 soar -ignore-rules \"ALI.001,IDX.*\" 打印支持的报告格式 soar -list-report-types 以指定格式输出报告 soar -report-type json 语法检查工具 echo \"select * from tb\" | soar -only-syntax-check echo $? 0 echo \"select * frm tb\" | soar -only-syntax-check At SQL 1 : syntax error at position 13 near 'frm' echo $? 1 慢日志进行分析示例 pt-query-digest slow.log > slow.log.digest # parse pt-query-digest's output which example script python2.7 doc/example/digest_pt.py slow.log.digest > slow.md SQL指纹 echo \"select * from film where col='abc'\" | soar -report-type=fingerprint 输出 select * from film where col=? 将 UPDATE/DELETE/INSERT 语法转为 SELECT echo \"update film set title = 'abc'\" | soar -rewrite-rules dml2select,delimiter -report-type rewrite 输出 select * from film; 合并多条ALTER语句 echo \"alter table tb add column a int; alter table tb add column b int;\" | soar -report-type rewrite -rewrite-rules mergealter 输出 ALTER TABLE `tb` add column a int, add column b int ; SQL美化 echo \"select * from tbl where col = 'val'\" | ./soar -report-type=pretty 输出 SELECT * FROM tbl WHERE col = 'val'; EXPLAIN信息分析报告 soar -report-type explain-digest ### Explain信息 | id | select\\_type | table | partitions | type | possible_keys | key | key\\_len | ref | rows | filtered | scalability | Extra | |---|---|---|---|---|---|---|---|---|---|---|---|---| | 1 | SIMPLE | *film* | NULL | ALL | NULL | NULL | NULL | NULL | 0 | 0.00% | ☠️ **O(n)** | | #### Explain信息解读 ##### SelectType信息解读 * **SIMPLE**: 简单SELECT(不使用UNION或子查询等). ##### Type信息解读 * ☠️ **ALL**: 最坏的情况, 从头到尾全表扫描. markdown 转 HTML 通过指定-report-css, -report-javascript, -markdown-extensions, -markdown-html-flags这些参数，你还可以控制HTML的显示格式。 cat test.md | soar -report-type md2html > test.html 清理测试环境残余的临时库表 如配置了-drop-test-temporary=false或soar异常中止，-test-dsn中会残余以optimizer_为前缀的临时库表。手工清理这些库表可以使用如下命令。 注意：为了不影响正在进行的其他SQL评审，-cleanup-test-database中会删除1小时前生成的临时库表。 ./soar -cleanup-test-database 产品对比 业内其他优秀产品对比 SOAR sqlcheck pt-query-advisor SQL Advisor Inception sqlautoreview 启发式建议 ✔️ ✔️ ✔️ ❌ ✔️ ✔️ 索引建议 ✔️ ❌ ❌ ✔️ ❌ ✔️ 查询重写 ✔️ ❌ ❌ ❌ ❌ ❌ 执行计划展示 ✔️ ❌ ❌ ❌ ❌ ❌ Profiling ✔️ ❌ ❌ ❌ ❌ ❌ Trace ✔️ ❌ ❌ ❌ ❌ ❌ SQL在线执行 ❌ ❌ ❌ ❌ ✔️ ❌ 数据备份 ❌ ❌ ❌ ❌ ✔️ ❌ 路线图 语法支持方面，目前主要依赖vitess,TiDB对SQL语法的支持。 目前仅针对MySQL语法族进行开发和测试，其他使用SQL的数据库产品暂不支持。 Profiling和Trace功能有待深入挖掘，供经验丰富的DBA分析使用。 目前尚不支持直接线上自动执行评审通过的SQL，后续会努力支持。 由于暂不支持线上自动执行，因此数据备份功能也未提供。 Vim, Sublime, Emacs等编辑器插件支持。 Currently, only support Chinese suggestion, if you can help us add multi-language support, it will be greatly appreciated. SOAR-WEB https://github.com/xiyangxixian/soar-web 下载地址 https://codeload.github.com/xiyangxixian/soar-web/zip/1.2.0 安装 首先需要python3..x和python库，python3这里不再赘述安装了。 pip install -r Flask pip install -r pymysql pip install -r pycryptodome 注：若 Crypto 模块找不到, 则需要在 python 的依赖库目录 Lib\\site-packages 中将 crypto 重命名为 Crypto 。 解压下载的文件 http://127.0.0.1:5077/ 手册 https://www.bookstack.cn/read/SOAR-zh/README.md Copyright © xiaoyi all right reserved，powered by Gitbook该文件修订时间： 2020-08-19 19:41:42 "},"dev/python/python.html":{"url":"dev/python/python.html","title":"软件开发","keywords":"","body":"TreeviewCopyright © aleen42 all right reserved, powered by aleen42 前言 Python 简介 在Window环境下安装 在CentOS环境下安装 安装 为什么要初始准备安装 Q:问题一(关于gcc) Q:问题二(关于ssl) Q:问题三（关于zlib） Q:问题四（关于make） Python库镜像加速 常见问题 python运行时目录 %matplotlib作用 Jupyter Notebook 简介 安装 插件扩展 扩展 markdown目录 前言 Python是一种跨平台的 计算机程序设计语言。 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。最初被设计用于编写自动化脚本(shell)，随着版本的不断更新和语言新功能的添加，越多被用于独立的、大型项目的开发。 很多人建议使用Anaconda包，将所有的Python环境安装好。但我不建议，因为我们初学者，要愿意折腾才知道，环境与环境的关联。如果是生产环境，我建议用Anaconda，因为我们保证生产环境的安全。 Anaconda介绍、安装及使用教程，有兴趣的可以通过这篇文章了解。 Python 简介 CentOS7默认安装了Python 2.7.5，因Python 2和Python3语法差别有一定的改变，所以我们需要在系统中安装Python3。在系统中可以同时存在Python2和Python3，且为了兼容Python2的程序，我们在安装Python3的同时，保留Python2。 几乎所有的Python 2程序都需要一些修改才能正常地运行在Python 3的环境下。为了简化这个转换过程，Python 3自带了一个叫做2to3的实用脚本(Utility Script)，这个脚本会将你的Python 2程序源文件作为输入，然后自动将其转换到Python 3的形式。案例研究:将chardet移植到Python 3(porting chardet to Python 3)描述了如何运行这个脚本，然后展示了一些它不能自动修复的情况。这篇附录描述了它能够自动修复的内容。 python2 与 python3 语法区别 在Window环境下安装 暂略 python -m pip install --upgrade pip -i https://pypi.douban.com/simple 在CentOS环境下安装 安装 为什么不直接用yum安装Python，是因为pip3需要单独安装 获取Python官方下载地址 https://www.python.org/downloads/ #初始准备安装（关于此安装解疑请参考下一节“为什么要初始准备安装”） yum -y install gcc openssl openssl-devel zlib zlib-devel make #下载 wget https://www.python.org/ftp/python/3.8.2/Python-3.8.2.tar.xz #解压 tar -xvJf Python-3.8.2.tar.xz #创建编译安装目录 mkdir /usr/local/python3 #安装 cd Python-3.8.2 ./configure --prefix=/usr/local/python3 --enable-optimizations --with-ssl #第一个指定安装的路径,不指定的话,安装过程中可能软件所需要的文件复制到其他不同目录,删除软件很不方便,复制软件也不方便. #第二个可以提高python10%-20%代码运行速度. #第三个是为了安装pip需要用到ssl,后面报错会有提到. #编译和安装 make && make install #创建软链接 ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3 ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3 #验证是否成功 python3 -V pip3 -V #安装相应的编译工具(在root用户下(不要用普通用户,麻烦),全部复制粘贴过去,一次性安装即可.) yum -y groupinstall \"Development tools\" yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel yum install -y libffi-devel zlib1g-dev yum install zlib* -y 上面这段请勿执行，因为我们不需要所有的编译工具，按下面的命令执行就可以了。 安装Python3参考 configure、make 和 make install 的区别 为什么要初始准备安装 Q:问题一(关于gcc) A:解决方式 #安装C编译器gcc(GNU编译器套件) yum -y install gcc Q:问题二(关于ssl) A:解决方式： yum install openssl openssl-devel Q:问题三（关于zlib） A:解决方式： yum install zlib zlib-devel Q:问题四（关于make） A:解决方式： yum install make Python库镜像加速 pip国内的一些镜像   阿里云 http://mirrors.aliyun.com/pypi/simple/   中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/   豆瓣(douban) http://pypi.douban.com/simple/   清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/   中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/ 修改源方法：   临时使用：     可以在使用pip的时候在后面加上-i参数，指定pip源     eg: pip install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple   永久修改：     linux:       修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下： [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple windows: 直接在user目录中创建一个pip目录，如：C:\\Users\\xx\\pip，在pip 目录下新建文件pip.ini，内容如下 或者按照网友的建议：win+R 打开用户目录%HOMEPATH%，在此目录下创建 pip 文件夹，在 pip 目录下创建 pip.ini 文件, 内容如下 [global] timeout = 6000 index-url = https://pypi.tuna.tsinghua.edu.cn/simple trusted-host = pypi.tuna.tsinghua.edu.cn 常见问题 python运行时目录 运行时目录是当前用户目录 import os path1=os.path.abspath('.') # 表示当前所处的文件夹的绝对路径 print(path1) path2=os.path.abspath('..') # 表示当前所处的文件夹上一级文件夹的绝对路径 print(path2) import os,sys os.chdir(os.path.dirname(sys.argv[0])) %matplotlib作用 是在使用jupyter notebook 或者 jupyter qtconsole的时候，才会经常用到%matplotlib，也就是说那一份代码可能就是别人使用jupyter notebook 或者 jupyter qtconsole进行编辑的。关于jupyter notebook是什么，可以参考这个链接：[Jupyter Notebook介绍、安装及使用教程][1] 而%matplotlib具体作用是当你调用matplotlib.pyplot的绘图函数plot()进行绘图的时候，或者生成一个figure画布的时候，可以直接在你的python console里面生成图像。 Jupyter Notebook 简介 Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言。 Jupyter Notebook 的本质是一个 Web 应用程序，便于创建和共享文学化程序文档，支持实时代码，数学方程，可视化和 markdown。 用途包括：数据清理和转换，数值模拟，统计建模，机器学习等等。 安装 参考安装 安装Jupyter Notebook的前提是需要安装了Python（3.3版本及以上，或2.7版本）。 #升级pip pip3 install --upgrade pip #安装jupyter pip3 install jupyter #启动 jupyter notebook # 后台运行启动 nohup jupyter notebook --allow-root > jupyter.log 2>&1 & Jupyter Notebook介绍、安装及使用教程 开机启动 配置：/root/.jupyter/jupyter_notebook_config.py ps -ef | grep jupyter kill -s 9 pid 插件扩展 扩展 #安装jupyter扩展 pip install jupyter_contrib_nbextensions #将jupyter插件集成至jupyter中(个人之这么理解的) jupyter contrib nbextension install --user --skip-running-check markdown目录 Copyright © xiaoyi all right reserved，powered by Gitbook该文件修订时间： 2020-10-05 23:38:19 "},"dev/nodejs/nodejs.html":{"url":"dev/nodejs/nodejs.html","title":"NodeJS开发","keywords":"","body":"TreeviewCopyright © aleen42 all right reserved, powered by aleen42 nodejs 简介 Windows环境中下载与安装 下载 安装 验证安装 镜像配置 环境配置 NPM&NPX 使用介绍 NPM&NPX 简介 nodejs 简介 1.Node.js是一个JavaScript运行时环境（可以解析和执行JavaScript代码） 2.现在的JavaScript可以完全脱离浏览器来运行，一切都归功于Node.js 3.浏览器中的JavaScript包括EcmaScript、BOM、DOM 4.Node.js中的JavaScript ：没有BOM、DOM，用EcmaScript进行编码，主要是在Node这个JavaScript执行环境中为JavaScript提供一些服务器级别的API操作（例如文件读写、网络服务的构建、网络通信、http服务器等处理） 5.Node.js特性是 使用事件驱动、非阻塞IO模型(异步)，使得其轻量和高效 6.npm是基于Node.js开发出来的包管理工具，npm是世界上最大的开源库生态系统，绝大多数js相关的包都存放在npm上，方便开发人员下载使用 7.Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的，Node.js构建在Google Chrome的V8引擎之上，是一个独立的JavaScript运行时环境 8.Node.js能做的事：Web服务器后台、命令行工具(npm、git、hexo) Windows环境中下载与安装 下载 在官方下载页面https://nodejs.org/en/download/，进行下载最新版本。产品开发建议使用LTS 安装 验证安装 此处说明下：Node.js已自带npm，安装Node.js时会一起安装，npm的作用就是对Node.js依赖的包进行管理，也可以理解为用来安装/卸载Node.js需要装的东西 镜像配置 ​ #查看已配置的地址 npm config get registry #安装npm的淘宝镜像(http://registry.npmjs.org ) npm config set registry https://registry.npm.taobao.org #不想用他们的，再设置回度原来的问就可答以了： npm config set registry https://registry.npmjs.org npm install -g cnpm --registry=https://registry.npm.taobao.org 环境配置 配置全局和缓存路径 默认全局目录是C:\\Users\\Administrator\\AppData\\Roaming\\npm\\node_modules默认-g也都会装到这个目录下，可以把全局变量NODE_PATH设置为这个目录。 通过npm config配置 # 设置全局模块 npm config set prefix \"D:\\NodeJS\\node_modules\\node_global\" # 设置缓存路径 npm config set cache \"D:\\NodeJS\\node_modules\\node_cache\" 说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\\Users\\用户名\\AppData\\Roaming\\npm】路径中，占C盘空间。例如：我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹【D:\\Develop\\nodejs】下创建两个文件夹【node_global】及【node_cache】如下图： 创建完两个空文件夹之后，打开cmd命令窗口，输入: npm config set prefix \"D:\\Develop\\nodejs\\node_global\" npm config set cache \"D:\\Develop\\nodejs\\node_cache\" 原默认为当前用户文档文件下的： 接下来设置环境变量，关闭cmd窗口，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量” 进入环境变量对话框，在【系统变量】下新建【NODE_PATH】，输入【D:\\Develop\\nodejs\\node_global\\node_modules】，将【用户变量】下的【Path】修改为【D:\\Develop\\nodejs\\node_global】 配置完后，安装个module测试下，我们就安装最常用的express模块，打开cmd窗口， 输入如下命令进行模块的全局安装： npm install express -g # -g是全局安装的意思 NPM&NPX 使用介绍 NPM&NPX 简介 NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种： 允许用户从NPM服务器下载别人编写的第三方包到本地使用。 允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。 允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用 一、更新 　　1、npm-check检查更新 　　　　　　npm install -g npm-check 　　　　　　npm-check 　　2.　　npm-upgrade更新 　　　　　　npm install -g npm-upgrade 　　　　　　npm-upgrade 　　3.　　更新全局包： 　　　　　　npm update -g 　　4.　　更新生产环境依赖包： 　　　　　　npm update --save 　　5.　　更新开发环境依赖包： 　　　　　　npm update --save-dev 　　　　　　npm install -g npm Copyright © xiaoyi all right reserved，powered by Gitbook该文件修订时间： 2020-10-07 11:58:09 "},"deeplearning/dataanalysis.html":{"url":"deeplearning/dataanalysis.html","title":"其它学习","keywords":"","body":"TreeviewCopyright © aleen42 all right reserved, powered by aleen42 Matplotlib学习 简介 安装 常见问题 中文字符问题 NumPy 简介 Matplotlib学习 简介 Matplotlib 是 Python 的绘图库。 它可与 NumPy 一起使用，提供了一种有效的 MatLab 开源替代方案。 它也可以和图形工具包一起使用，如 PyQt 和 wxPython。 Matplotlib 是什么？ Matplotlib 是一个 Python 的 2D绘图库，它以各种硬拷贝格式和跨平台的交互式环境生成出版质量级别的图形。 为什么选择 Matplotlib？ 如果某天你发现自己要学习 Matplotlib, 很可能是因为: 1、Matplotlib 是一个非常强大的 Python 画图工具；2、手中有很多数据, 可是不知道该怎么呈现这些数据。 Matplotlib 能帮你？ 绘制线图、散点图、等高线图、条形图、柱状图、3D 图形、、甚至是图形动画等等。 安装 #安装 pip install matplotlib #验证安装,是否输出matplotlib (版本号) pip list | grep matplotlib 常见问题 中文字符问题 Matplotlib 默认情况不支持中文，我们可以使用以下两种简单的方法来解决： 1、首先下载字体（注意系统）：https://www.fontpalace.com/font-details/SimHei/ SimHei.ttf 文件放在当前执行的代码文件中： import numpy as np from matplotlib import pyplot as plt import matplotlib # fname 为 你下载的字体库路径，注意 SimHei.ttf 字体的路径 zhfont1 = matplotlib.font_manager.FontProperties(fname=\"SimHei.ttf\") x = np.arange(1,11) y = 2 * x + 5 plt.title(\"菜鸟教程 - 测试\", fontproperties=zhfont1) # fontproperties 设置中文显示，fontsize 设置字体大小 plt.xlabel(\"x 轴\", fontproperties=zhfont1) plt.ylabel(\"y 轴\", fontproperties=zhfont1) plt.plot(x,y) plt.show() 2、我们还可以使用系统的字体 from matplotlib import pyplot as plt import matplotlib a=sorted([f.name for f in matplotlib.font_manager.fontManager.ttflist]) for i in a: print(i) 打印出你的 font_manager 的 ttflist 中所有注册的名字，找一个看中文字体例如：STFangsong(仿宋）,然后添加以下代码即可： plt.rcParams['font.family']=['STFangsong'] NumPy 简介 NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。 NumPy 的前身 Numeric 最早是由 Jim Hugunin 与其它协作者共同开发，2005 年，Travis Oliphant 在 Numeric 中结合了另一个同性质的程序库 Numarray 的特色，并加入了其它扩展而开发了 NumPy。NumPy 为开放源代码并且由许多协作者共同维护开发。 NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含： 一个强大的N维数组对象 ndarray 广播功能函数 整合 C/C++/Fortran 代码的工具 线性代数、傅里叶变换、随机数生成等功能 django Copyright © xiaoyi all right reserved，powered by Gitbook该文件修订时间： 2020-05-03 12:23:37 "},"other/projectmanagement/projectsummary.html":{"url":"other/projectmanagement/projectsummary.html","title":"项目管理","keywords":"","body":"TreeviewCopyright © aleen42 all right reserved, powered by aleen42 项目立项前 始于宣讲 需求范围的确定 测试范围的确定 项目研发中 项目结项 前言 任何的项目立项前都要确定需求范围和测试范围。需求范围≠测试范围，因为对于已有产品的升级或紧急运维BUG修复，都需要将原有的功能进行全面测试。作为项目管理也有四年，想总结总结认识和看法。对于项目管理经验留痕和不断改进。 项目立项前 任何项目在立项前，所有项目成员都要进行统一认识的宣讲。个人经验来看，总是会存在项目组成员都是老熟人或者项目过程中新协调加入的项目组成员是老熟人，而疏忽于项目宣讲，而导致项目研发和测试过程中，大家认识不统一，摩擦不断。所以不能存在侥幸心理。只有先期的麻烦，才能给以后带来便利。 始于宣讲 项目都是渐进明细的，所以我们不能过分要求产品经理，对需求说明及原型在编写时，能百分之百覆盖所有情况。故我们除因产品经理对需求有特殊说明，不然我们需要一些通用做法，避免产品说明未覆盖而引起争议。 字段长度问题： 1、富文本或多文字类型：2000字（汉字），数据库设计时要考虑HTML标签+2000。 2、普通类型名称类型：50字（汉字）,基本能覆盖普通名称长度。 文字换行或截取：（为了样式不易变形，通常采取截取模式） 1、表格中： a、人名不能截取，字多换行 b、时间如需截取，必须显示到日期 c、其它格式最好能通过CSS3样式文本溢出自适应方式，如不能，建议js保留5-10个，已便识别 2、列表 a、通过CSS3样式文本溢出，通常截取10个字 数字精度: 1、数据库设计：在数据值不大时，decimal类型存储，因浮点型等数据类型，存储的值都是近视值。但decimal类型会显示定义的小数位无意义的0，显示时需要做处理。 2、单位：任何涉及到单位的数据，都必须注明单位，数据展示多采用元、米、平方米等基本单位 需求范围的确定 很多产品经理，不愿画原型，写需求文档，或者原型粗糙和描述简短不清容易歧义。关于这个，最次需要写需求列表，描述清楚细节。对于老项目的修改，要说清连锁需要修改的地方。避免研发,对整个项目认识不全面而修改不到位，而引起新bug。 测试范围的确定 前言中说了，需求范围和测试范围不一样。所有测试范围，对于不管任何项目都应该要整体测试。这就带来一个新的问题，不是本次需求范围内的引起BUG问题，如何管理？本次需求引起的缺陷或者原有功能严重性缺陷必须修改，因为不修复会影响客户使用，这个我们不需要纠结，毕竟原有功能新发现严重性缺陷较少。对于原有功能上新发现的BUG，但是又不影响功能，毕竟原有隐藏的问题有多少，未知风险很大（最要是要话大量的时间，而且会不会有连锁反应也未知），这是我们最纠结的，修不修复，容易争执。 我个人有两点建议：一是；立项时对此类问题一律要求归纳至新需求立项修改；二是,立项是对于此类问题流出一定风险时间，对这些问题新发现的问题进行优先级排序，对于超过预期的，归纳至新需求立项修改。 个人建议采用第二种，毕竟老问题新发现难免。故此立项时时间周期一定要估算清楚。 项目研发中 项目结项 Copyright © xiaoyi all right reserved，powered by Gitbook该文件修订时间： 2020-07-04 21:33:58 "},"cicd/cicd.html":{"url":"cicd/cicd.html","title":"CICD","keywords":"","body":"持续集成背景 为什么需要持续集成？ 原来我们软件开发中，研发编码并自测完成所有功能后，由指定开发工程师通过IDE发布压缩后，提交测试人员测试。 这里很容易出现两个问题或者说是不好的地方。一是，负责发布的人，部分代码没有提交到代码库里，导致源代码管理和已发布的程序不一致。二是，负责发布的人，每次发布都要关心相关的注意事项，导致发布时间长和很容易遗漏重点事项等等。 通过持续集成，一次配置后，任何人（包括测试工程师，产品经理）都可以轻松发布程序，且程序的代码来源于已提交在源代码服务器里的代码。 持续集成不仅仅可以做到上面的问题。还能无人值守定时发布，集成自动化测试，代码走查等等功能。本次文档仅说明用于“转测试阶段”的操作。 Copyright © xiaoyi all right reserved，powered by Gitbook该文件修订时间： 2020-05-02 20:11:29 "},"cicd/jenkins/jenkins.html":{"url":"cicd/jenkins/jenkins.html","title":"Jenkins安装","keywords":"","body":"TreeviewCopyright © aleen42 all right reserved, powered by aleen42 下载 安装 linux环境下安装 使用 修改用密码 安装插件 源代码插件（SVN） jenkins插件下载镜像加速 问题 代理 windows环境下安装 下载 地址：https://jenkins.io/ 安装 linux环境下安装 ToDo 使用 修改用密码 安装插件 源代码插件（SVN） jenkins插件下载镜像加速 修改C:\\windows\\system32\\drivers\\etc\\hosts文件 127.0.0.1 updates.jenkins-ci.org 修改Nginx代理设置 location /download/plugins { proxy_next_upstream http_502 http_504 error timeout invalid_header; proxy_set_header Host mirrors.tuna.tsinghua.edu.cn; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; rewrite /download/plugins(.*) /jenkins/plugins/$1 break; proxy_pass https://mirrors.tuna.tsinghua.edu.cn; } 问题 代理 SVN配置 C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\Roaming\\Subversion C:\\Users\\Administrator\\AppData\\Roaming\\Subversion Copyright © xiaoyi all right reserved，powered by Gitbook该文件修订时间： 2020-08-19 19:41:42 "},"cicd/net/net.html":{"url":"cicd/net/net.html","title":"Net自动构建","keywords":"","body":"TreeviewCopyright © aleen42 all right reserved, powered by aleen42 【构建】服务器环境安装 ASP.NET生成工具(MSBuild) 下载 安装 Jenkins相关插件安装和配置 安装插件 配置 【测试】服务器环境安装 IIS安装时必须安装管理服务或添加安装管理服务 Web Deploy安装 下载 安装 站点启用Web Deploy发布 建立构建任务 准备构建配置 新建构建任务 问题 报错问题 AppSettings的值问题 asp.net 【构建】服务器环境安装 ASP.NET生成工具(MSBuild) 下载 搜索引擎搜索VS2017,进入微软官方下载页面，在页面下方的“所有下载”中展开“工具”栏位，按下图下载生产工具。 安装 后续根据你发布的类型选择你要安装的工具类型。 Jenkins相关插件安装和配置 安装插件 配置 【测试】服务器环境安装 IIS安装时必须安装管理服务或添加安装管理服务 Web Deploy安装 下载 地址：https://www.iis.net/downloads/microsoft/web-deploy 安装 站点启用Web Deploy发布 在启用之前，请按照通常IIS部署站点方式部署网站，然后再这个网站右键如下图启用。 建立构建任务 准备构建配置 新建构建任务 问题 报错问题 请把MSBuild加入信任 AppSettings的值问题 Copyright © xiaoyi all right reserved，powered by Gitbook该文件修订时间： 2020-05-10 01:07:31 "},"cicd/java/java.html":{"url":"cicd/java/java.html","title":"Java自动构建","keywords":"","body":"TreeviewCopyright © aleen42 all right reserved, powered by aleen42 SpringBoot 【构建】服务器环境安装 JDK下载与安装 maven下载与安装 下载解压版 配置环境变量 配置阿里maven仓库 Jenkins相关插件安装和配置 插件 JDK配置 Maven配置 ssh配置 【测试】服务器环境安装 JDK下载与安装 JDK下载与配置 FreeSSHd下载与安装 FreeSSHd下载与配置 Nginx下载与配置 建立构建任务 建立项目和配置SVN文件获取 项目文件生成 将文件上传至测试服务器并执行批处理操作 批处理文件 SpringBoot 【构建】服务器环境安装 JDK下载与安装 JDK最新版本下载地址 将下载好后的文件进行解压缩 maven下载与安装 下载解压版 maven最新版下载 将下载好后的文件进行解压缩 配置环境变量 配置 配置阿里maven仓库 nexus-aliyun central Nexus aliyun http://maven.aliyun.com/nexus/content/groups/public Jenkins相关插件安装和配置 插件 系统管理 → 管理插件，安装插件：Maven Integration。Maven Integration这个插件用来构建maven项目 JDK配置 Maven配置 ssh配置 在系统配置中设置SSH服务器连接 SSH Servers→新增→高级→Use password authentication, or use a different key进行配置 保存后可以随时修改等信息 保存后可以随时修改信息 【测试】服务器环境安装 JDK下载与安装 JDK下载与配置 参考上一节JDK下载与安装 FreeSSHd下载与安装 FreeSSHd下载与配置 FreeSSHd最新版本下载地址 双击刚刚下载的freeSSHd.exe进行安装，安装时其他都是默认安装选项，只有最后两步会弹出对话框询问是否生成私钥和是否设置为系统服务，选择“yes\"即可，因为没有生成私钥，SSH服务将不能启动，设置系统服务的话每次开机都会自动启动SSH服务。 因为刚刚安装时选择了设置成系统服务，那么程序会马上启动，因为FREESSHD还没有配置好，我们需要打开freesshd设置窗口进行配置，因此需要把刚刚启动的服务到进程里去结束掉，否则再点击桌面打开freesshd配置时SSH服务启动不了，因为22端口被占用了。如下图，结束掉进程里面的freesshdservice.exe进程。 点开桌面的freesshd图标，开始对freesshd进行配置。第一次打开会弹出它的欢迎框，之后就不会了。 先到USER选项卡添加SSH用户，如图，添加默认的系统管理员帐号，authorization选择NT authentication，这样的话密码就是系统管理员帐号的密码。然后勾选shell选项，确定添加。 回到主界面，选择Authentication选项卡，password authentication项选择Required项，Public key authentication选择Disabled项。如果不这样设置连接的时候将会出现Access denied的错误，导致ssh客户端不能连接。 设置文件路径 右键点击任务栏下的freesshd图标点击Unload推出软件，然后重新打开freesshd软件使6步骤的配置生效。打开后点击ssh server下的Click here to start 启动SSH服务 ※关于开放22号端口或防火墙设置，此处不赘述。 Nginx下载与配置 nginx官方下载地址 解压后配置文件路径 修改配置文件nginx-1.18.0\\conf\\nginx.conf 建立构建任务 建立项目和配置SVN文件获取 项目文件生成 echo install common-utils cd code/EBD后台代码/gta-ebd/common-utils echo %cd% call mvn install cd ../bigscreen-api/ echo %cd% call mvn package cd ../../../EBD前端代码/gta-ebd-vue/ echo %cd% npm install && npm run build 将文件上传至测试服务器并执行批处理操作 批处理文件 downjar.bat @echo off & setlocal EnableDelayedExpansion title 杀死端口 title 关闭大屏后端 set port=6410 set pid=0 set pName=\"\" ::将端口所对应的进程kill掉 for /f \"tokens=2,5\" %%b in ('netstat -ano ^| findstr \":%port%\"') do ( set pid=%%c set pName=\"\" for /f \"skip=3\" %%a in ('tasklist /fi \"pid eq %%c\"') do ( set pName=%%a ) if !pName! == \"\" ( if !pName! == \"\" ( echo 端口号【%port%】已被本机释放 ) else ( echo 程序!pName!通过进程%%c在使用端口%port% taskkill /f /pid %%c echo 端口号【%port%】相关进程已杀死 ) ) ::将所对应的 if !pid! NEQ 0 ( for /f \"skip=3\" %%a in ('tasklist /fi \"pid eq %pid%\"') do ( set pName=%%a echo %%a检测失败 ) ) if !pName!==\"\" ( echo 正在启动 START javaw -Xms512m -Xmx1024m -Xmn512m -jar %~dp0bigscreen-api\\bigscreen.jar --server.port=!port! ::等待10秒钟 ping -n 10 127.0.0.1>nul echo 启动完成 )else ( echo !pName!重新启动失败，请重试 if !pid!==0 ( echo 端口号【%port%】未使用 ) else ( echo 端口号【%port%】相关进程已杀死 ) ) else ( echo 关闭失败，请重试 ) ::pause exit pause ::exit restartjar.bat @echo off & setlocal EnableDelayedExpansion title 杀死端口 title 启动大屏后端 set port=9999 set port=6410 set pid=0 set pName=\"\" ::将端口所对应的进程kill掉 for /f \"tokens=2,5\" %%b in ('netstat -ano ^| findstr \":%port%\"') do ( set pid=%%c set pName=\"\" for /f \"skip=3\" %%a in ('tasklist /fi \"pid eq %%c\"') do ( set pName=%%a ) if !pName! == \"\" ( echo 端口号【%port%】已被本机释放 ) else ( echo 程序!pName!通过进程%%c在使用端口%port% taskkill /f /pid %%c echo 端口号【%port%】相关进程已杀死 ) ) ::将所对应的 if !pid! NEQ 0 ( for /f \"skip=3\" %%a in ('tasklist /fi \"pid eq %pid%\"') do ( set pName=%%a echo %%a检测失败 ) ) if !pName!==\"\" ( if !pid!==0 ( echo 端口号【%port%】未使用 ) else ( echo 端口号【%port%】已无相关程序使用 ) ) else ( echo 关闭失败，请重试 echo 正在启动大屏后端%~dp0bigscreen.jar START javaw -Xms512m -Xmx1024m -Xmn512m -jar %~dp0bigscreen.jar --server.port=!port! ping localhost -n 10 > nul echo 启动完成 )else ( echo !pName!重新启动失败，请重试 ) pause ::exit ::pause exit setconfigvue.bat @echo off title 修改vue前端配置 cd %~dp0 echo const __host__ = \"http://10.1.136.157:6310\"; >vue/config/env.js echo const __ebdhost__=\"http://10.1.137.105:6410\"; >>vue/config/env.js echo const __doorUrl = \"http://10.1.135.40:8016/\"; >>vue/config/env.js exit Copyright © xiaoyi all right reserved，powered by Gitbook该文件修订时间： 2020-08-19 19:41:42 "}}